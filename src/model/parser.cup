package model;
import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
parser code
{:
Scanner scanner;
Writer writer;

public void setScanner(Scanner scanner)
    {
        this.scanner = scanner;
    }
    
    public void setWriter(Writer  writer)
    {
        this.writer = writer;
    }
    
    public ParserCup(Scanner scanner,Writer writer){
        super(scanner);
        this.scanner = scanner;
        this.writer = writer;
    }




    public void report_error(String message, Object info){
		StringBuilder msg = new StringBuilder("Error");
		if(info instanceof java_cup.runtime.Symbol){
			Symbol s = (java_cup.runtime.Symbol) info;
			if(s.left >= 0){
				msg.append(" in line " + (s.left+1));
				if(s.right >= 0) msg.append(", column " + (s.right+1));
			}
		}

		msg.append(" : " + message);
		System.err.println(msg);
		writer.write(msg.toString()+"\r\n");
	}
	
	public Writer getWriter()
	{
		return this.writer;
	}
	
	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		//writer.write(message + " " + info + "\r\n");
		//System.exit(1);
	}
:}

init with    {: //scanner.init(); :};
scan with    {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal String PROGRAM, USES, SEMICOLON, VAR, DOT, PROCEDURE, LEFTBRACKET, RIGHTBRACKET, FUNCTION, COLON, BEGIN, END, COMMA, ARRAY, LEFT_BRACKET2, RIGHT_BRACKET2, WHILE, REPEAT, DO, UNTIL, FOR, ASSIGNMENT, TO, DOWNTO, IF, THEN, ELSE, CASE, OF, EQUALS, GREATER, LESS, LESS_OR_EQUALS, GREATER_OR_EQUALS, NOT_EQUALS, ADD, MINUS, MULTIPLY, DIVIDE, MOD, NOT, WRITE, WRITELN, READ, READLN, READKEY,NIL, OR, AND, ASSINGMENT;
terminal String INT, IDE, REAL, STRING, CHAR, BOOLEAN, COMMENT;
terminal Integer INT_CONST;

/* Terminals with attached values */
/* terminal Integer INT;
terminal String IDE;
terminal Double REAL;
terminal String STRING;
terminal Char CHAR;
terminal Boolean BOOLEAN;*/

/* Non terminals */
non terminal String program, procedure, function, block, var, variables, names, type, arg;
non terminal String array, instructions, loop_stat, cond_stat, case, caselist,case_type, expr, expr_alg, stat, atom, rd, wrt, wrt_atom, list_stat, instr_stat;

precedence nonassoc LESS, LESS_OR_EQUALS, EQUALS, NOT_EQUALS, GREATER, GREATER_OR_EQUALS;
precedence left ADD, MINUS, OR;
precedence left MULTIPLY, DIVIDE, AND, MOD;
precedence right NOT;
precedence right DOT;



start with program;
program ::= PROGRAM IDE:i1 SEMICOLON USES IDE:i2 SEMICOLON VAR var:v procedure:p function:f block:b DOT {: parser.getWriter().setProgramName(i1); parser.getWriter().write(v+p+f+"void main(){"+b+"}"); :};

procedure::=  {: RESULT =""; :}|
      PROCEDURE IDE:i  LEFTBRACKET arg:a RIGHTBRACKET SEMICOLON VAR var:v block:b SEMICOLON
      {: RESULT="void "+i+"("+a+"){ \r\n"+v+b+"} \r\n"; :};

function::=  {: RESULT =""; :}  |
FUNCTION IDE:i LEFTBRACKET arg:a RIGHTBRACKET COLON type:r SEMICOLON VAR var:v block:b SEMICOLON
      {: RESULT=r+" "+i+"("+a+"){ \r\n"+v+b+"} \r\n"; :};
      
block::= BEGIN instructions:i END {: RESULT="\r\n"+i+" \r\n"; :};

var::= {: RESULT =""; :}
| variables:vars SEMICOLON var:v {:RESULT=vars+";\r\n"+v; :};

variables::= names:n COLON type:t {:RESULT=t+" "+n+""; :};

arg::= variables:v {: RESULT =v; :}
| variables:v COMMA arg:a {:RESULT=v+", "+a; :};

names::=     IDE:i {: RESULT=i; :}
| IDE:i COMMA names:n {: RESULT=i+","+n; :};

type::=      INT {: RESULT = "int"; :}
| REAL {: RESULT = "real"; :}
| STRING {: RESULT = "char[]"; :}
| CHAR {: RESULT = "char"; :}
| array:a {: RESULT=a; :};

array ::= ARRAY LEFT_BRACKET2 INT:i1 DOT DOT INT:i2 RIGHT_BRACKET2 OF type:t {: RESULT=t+"["+i2+"]"; :};

instructions ::= {:  RESULT =""; :} | instr_stat:i instructions:is {: RESULT = i+"\r\n"+is; :};

instr_stat ::=  loop_stat:l SEMICOLON {: RESULT=l; :}| cond_stat:c SEMICOLON {: RESULT=c; :}| list_stat:l {: RESULT=l; :};

loop_stat::= WHILE expr:e DO block:b {: RESULT="while("+e+"){"+b+"}; \r\n"; :}
| REPEAT stat:s UNTIL expr:e  {: RESULT="do{"+s+"}"+"while("+e+");"; :}
| FOR IDE:i ASSINGMENT expr_alg:ea1 TO expr_alg:ea2 DO block:b {: RESULT="for("+i+"="+ea1+";"+i+"<"+ea2+";"+i+"++){"+b+"}; \r\n"; :}
| FOR IDE:i ASSINGMENT expr_alg:e1 DOWNTO expr_alg:e2 DO block:b {: RESULT="for("+i+"="+e1+";"+i+">"+e2+";"+i+"--){"+b+"}; \r\n"; :};

cond_stat::= IF expr:e THEN block:b {: RESULT="if("+e+"){"+b+"}; \r\n"; :}
| IF expr:e THEN block:b1 ELSE block:b2 {: RESULT="if("+e+"){"+b1+"} else{"+b2+"}; \r\n"; :}
| CASE LEFTBRACKET IDE:i RIGHTBRACKET OF caselist:cl END {: RESULT="switch("+i+"){"+cl+"} \r\n"; :};

caselist::= {: :} |case:c1 caselist:c2 {:RESULT=c1+""+c2 ; :};

case::= case_type:ct COLON expr:e1 SEMICOLON{: RESULT="case \'"+ct+"\'{"+e1+"} \r\n"; :};

case_type::=CHAR {: RESULT="char"; :}
|INT {: RESULT="int"; :}
| BOOLEAN {: RESULT="boolean"; :};

expr::= expr_alg:e1 EQUALS expr_alg:e2 {: RESULT=e1+"="+e2; :}
| expr_alg:e1 GREATER expr_alg:e2 {: RESULT=e1+">"+e2; :}
| expr_alg:e1 LESS expr_alg:e2 {: RESULT=e1+"<"+e2; :}
| expr_alg:e1 LESS_OR_EQUALS expr_alg:e2 {: RESULT=e1+"<="+e2; :}
| expr_alg:e1 GREATER_OR_EQUALS expr_alg:e2 {: RESULT=e1+">="+e2; :}
| expr_alg:e1 NOT_EQUALS expr_alg:e2 {: RESULT=e1+"!="+e2; :};

expr_alg::= atom:a {: RESULT=a+""; :}
| MINUS atom:a {: RESULT="-"+a; :}
| expr_alg:e ADD atom:a {: RESULT=e+"+"+a; :}
| expr_alg:e MINUS atom:a {: RESULT=e+"-"+a; :}
| expr_alg:e MULTIPLY atom:a {: RESULT=e+"*"+a; :}
| expr_alg:e DIVIDE atom:a {: RESULT=e+"/"+a; :}
| expr_alg:e AND atom:a {: RESULT=e+"&"+a; :}
| expr_alg:e OR atom:a {: RESULT=e+"|"+a; :}
| expr_alg:e MOD atom:a {: RESULT=e+" mod "+a; :} ;

atom::= LEFTBRACKET expr_alg:ea RIGHTBRACKET {: RESULT="("+ea+")"; :}
| IDE:i {: RESULT=i+""; :}
| NIL {: RESULT="NULL"; :}
| INT:i {: RESULT=i+""; :}
| REAL:r {: RESULT=r+""; :}
| STRING:s {: RESULT="\""+s+"\""; :}
| CHAR:c {: RESULT="\'"+c+"\'"; :}
| NOT expr_alg:ea {: RESULT="!"+ea; :};

list_stat::=stat:s list_stat:ls {: RESULT = s+"\r\n"+ls; :};

stat::= IDE:i ASSINGMENT expr_alg:ea SEMICOLON {: RESULT=i+"="+ea; :}
| rd:r SEMICOLON {: RESULT=r; :}
| wrt:w SEMICOLON {: RESULT=w; :};
//| stat:s1 SEMICOLON stat:s2 SEMICOLON {: RESULT = s1+"; \r\n"+s2+"; \r\n"; :};

rd::= READ LEFTBRACKET IDE:i RIGHTBRACKET {: RESULT="scanf(\"%s\","+i+");"; :}
| READKEY LEFTBRACKET IDE:i RIGHTBRACKET {: RESULT=i+"= getchar();"; :}
| READLN LEFTBRACKET IDE:i RIGHTBRACKET {: RESULT="scanf(\"%s\","+i+");"; :};

wrt::=     WRITE LEFTBRACKET wrt_atom:w RIGHTBRACKET {: RESULT="printf("+w+");"; :}
| WRITELN LEFTBRACKET wrt_atom:w RIGHTBRACKET {: RESULT="printf("+w+"); printf(\"\r\n\");"; :};

wrt_atom::=     {: :}
| atom:a COMMA wrt_atom:w {: :};