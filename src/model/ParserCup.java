
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 17 00:48:18 CEST 2015
//----------------------------------------------------

package model;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 17 00:48:18 CEST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\016\000\002\003" +
    "\002\000\002\003\014\000\002\004\002\000\002\004\016" +
    "\000\002\005\005\000\002\006\002\000\002\006\005\000" +
    "\002\007\005\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\013\000\002\013\002" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\014\006\000\002\014\006\000\002\014\012\000\002" +
    "\014\012\000\002\015\006\000\002\015\010\000\002\015" +
    "\011\000\002\017\002\000\002\017\004\000\002\016\006" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\022" +
    "\003\000\002\022\004\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\004" +
    "\000\002\023\006\000\002\023\006\000\002\023\004\000" +
    "\002\023\004\000\002\023\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\026\006\000\002\026" +
    "\006\000\002\027\002\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\004\005\001\002\000\004\002\275\001" +
    "\002\000\004\067\006\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\067\011\001\002\000" +
    "\004\006\012\001\002\000\004\007\013\001\002\000\012" +
    "\011\ufffa\014\ufffa\016\ufffa\067\015\001\002\000\010\011" +
    "\044\014\uffff\016\uffff\001\002\000\006\015\ufff7\020\042" +
    "\001\002\000\004\015\022\001\002\000\004\006\020\001" +
    "\002\000\012\011\ufffa\014\ufffa\016\ufffa\067\015\001\002" +
    "\000\010\011\ufff9\014\ufff9\016\ufff9\001\002\000\014\021" +
    "\027\066\030\070\024\071\023\072\026\001\002\000\006" +
    "\006\ufff3\013\ufff3\001\002\000\006\006\ufff4\013\ufff4\001" +
    "\002\000\006\006\ufff8\013\ufff8\001\002\000\006\006\ufff2" +
    "\013\ufff2\001\002\000\004\022\032\001\002\000\006\006" +
    "\ufff5\013\ufff5\001\002\000\006\006\ufff1\013\ufff1\001\002" +
    "\000\004\066\033\001\002\000\004\010\034\001\002\000" +
    "\004\010\035\001\002\000\004\066\036\001\002\000\004" +
    "\023\037\001\002\000\004\040\040\001\002\000\014\021" +
    "\027\066\030\070\024\071\023\072\026\001\002\000\006" +
    "\006\ufff0\013\ufff0\001\002\000\004\067\015\001\002\000" +
    "\004\015\ufff6\001\002\000\004\067\264\001\002\000\006" +
    "\014\047\016\ufffd\001\002\000\004\016\061\001\002\000" +
    "\004\067\050\001\002\000\004\012\051\001\002\000\004" +
    "\067\015\001\002\000\004\013\053\001\002\000\004\015" +
    "\054\001\002\000\014\021\027\066\030\070\024\071\023" +
    "\072\026\001\002\000\004\006\056\001\002\000\004\007" +
    "\057\001\002\000\006\016\ufffa\067\015\001\002\000\004" +
    "\016\061\001\002\000\016\017\uffef\024\066\025\065\030" +
    "\067\034\073\037\074\001\002\000\004\006\063\001\002" +
    "\000\004\016\ufffc\001\002\000\004\017\uffec\001\002\000" +
    "\016\055\222\056\217\057\213\060\215\061\221\067\216" +
    "\001\002\000\024\012\112\050\111\054\123\062\115\066" +
    "\113\067\114\070\120\071\116\072\124\001\002\000\004" +
    "\067\175\001\002\000\004\006\174\001\002\000\004\017" +
    "\173\001\002\000\004\006\172\001\002\000\024\012\112" +
    "\050\111\054\123\062\115\066\113\067\114\070\120\071" +
    "\116\072\124\001\002\000\004\012\075\001\002\000\004" +
    "\067\076\001\002\000\004\013\077\001\002\000\004\040" +
    "\100\001\002\000\012\017\uffe4\066\106\072\105\073\104" +
    "\001\002\000\004\017\164\001\002\000\004\015\110\001" +
    "\002\000\012\017\uffe4\066\106\072\105\073\104\001\002" +
    "\000\004\015\uffdf\001\002\000\004\015\uffe1\001\002\000" +
    "\004\015\uffe0\001\002\000\004\017\uffe3\001\002\000\024" +
    "\012\112\050\111\054\123\062\115\066\113\067\114\070" +
    "\120\071\116\072\124\001\002\000\022\012\112\054\123" +
    "\062\115\066\113\067\114\070\120\071\116\072\124\001" +
    "\002\000\024\012\112\050\111\054\123\062\115\066\113" +
    "\067\114\070\120\071\116\072\124\001\002\000\052\006" +
    "\uffcc\013\uffcc\020\uffcc\026\uffcc\032\uffcc\033\uffcc\035\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\063\uffcc\064\uffcc" +
    "\001\002\000\052\006\uffce\013\uffce\020\uffce\026\uffce\032" +
    "\uffce\033\uffce\035\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\063\uffce\064\uffce\001\002\000\052\006\uffcd\013\uffcd" +
    "\020\uffcd\026\uffcd\032\uffcd\033\uffcd\035\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\063\uffcd\064\uffcd\001\002\000" +
    "\052\006\uffca\013\uffca\020\uffca\026\uffca\032\uffca\033\uffca" +
    "\035\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\063\uffca" +
    "\064\uffca\001\002\000\052\006\uffd8\013\uffd8\020\uffd8\026" +
    "\uffd8\032\uffd8\033\uffd8\035\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\063\uffd8\064\uffd8\001\002\000\052\006\uffcb" +
    "\013\uffcb\020\uffcb\026\uffcb\032\uffcb\033\uffcb\035\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\063\uffcb\064\uffcb\001" +
    "\002\000\034\041\152\042\146\043\151\044\145\045\150" +
    "\046\147\047\130\050\131\051\133\052\132\053\126\063" +
    "\134\064\127\001\002\000\004\006\144\001\002\000\024" +
    "\012\112\050\111\054\123\062\115\066\113\067\114\070" +
    "\120\071\116\072\124\001\002\000\052\006\uffc9\013\uffc9" +
    "\020\uffc9\026\uffc9\032\uffc9\033\uffc9\035\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\063\uffc9\064\uffc9\001\002\000" +
    "\052\006\uffc8\013\uffc8\020\uffc8\026\uffc8\032\uffc8\033\uffc8" +
    "\035\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\022\012\112\054\123\062\115\066" +
    "\113\067\114\070\120\071\116\072\124\001\002\000\022" +
    "\012\112\054\123\062\115\066\113\067\114\070\120\071" +
    "\116\072\124\001\002\000\022\012\112\054\123\062\115" +
    "\066\113\067\114\070\120\071\116\072\124\001\002\000" +
    "\022\012\112\054\123\062\115\066\113\067\114\070\120" +
    "\071\116\072\124\001\002\000\022\012\112\054\123\062" +
    "\115\066\113\067\114\070\120\071\116\072\124\001\002" +
    "\000\022\012\112\054\123\062\115\066\113\067\114\070" +
    "\120\071\116\072\124\001\002\000\022\012\112\054\123" +
    "\062\115\066\113\067\114\070\120\071\116\072\124\001" +
    "\002\000\052\006\uffd1\013\uffd1\020\uffd1\026\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\063\uffd1\064\uffd1\001\002\000\052\006\uffd4\013\uffd4\020" +
    "\uffd4\026\uffd4\032\uffd4\033\uffd4\035\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\063\uffd4\064\uffd4\001\002\000\052" +
    "\006\uffd3\013\uffd3\020\uffd3\026\uffd3\032\uffd3\033\uffd3\035" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\063\uffd3\064" +
    "\uffd3\001\002\000\052\006\uffd5\013\uffd5\020\uffd5\026\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\063\uffd5\064\uffd5\001\002\000\052\006\uffd6\013" +
    "\uffd6\020\uffd6\026\uffd6\032\uffd6\033\uffd6\035\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\063\uffd6\064\uffd6\001\002" +
    "\000\052\006\uffd2\013\uffd2\020\uffd2\026\uffd2\032\uffd2\033" +
    "\uffd2\035\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\063" +
    "\uffd2\064\uffd2\001\002\000\052\006\uffd0\013\uffd0\020\uffd0" +
    "\026\uffd0\032\uffd0\033\uffd0\035\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\063\uffd0\064\uffd0\001\002\000\012\017" +
    "\uffe2\066\uffe2\072\uffe2\073\uffe2\001\002\000\024\012\112" +
    "\050\111\054\123\062\115\066\113\067\114\070\120\071" +
    "\116\072\124\001\002\000\024\012\112\050\111\054\123" +
    "\062\115\066\113\067\114\070\120\071\116\072\124\001" +
    "\002\000\024\012\112\050\111\054\123\062\115\066\113" +
    "\067\114\070\120\071\116\072\124\001\002\000\024\012" +
    "\112\050\111\054\123\062\115\066\113\067\114\070\120" +
    "\071\116\072\124\001\002\000\024\012\112\050\111\054" +
    "\123\062\115\066\113\067\114\070\120\071\116\072\124" +
    "\001\002\000\024\012\112\050\111\054\123\062\115\066" +
    "\113\067\114\070\120\071\116\072\124\001\002\000\026" +
    "\006\uffde\026\uffde\035\uffde\047\130\050\131\051\133\052" +
    "\132\053\126\063\134\064\127\001\002\000\026\006\uffdc" +
    "\026\uffdc\035\uffdc\047\130\050\131\051\133\052\132\053" +
    "\126\063\134\064\127\001\002\000\026\006\uffda\026\uffda" +
    "\035\uffda\047\130\050\131\051\133\052\132\053\126\063" +
    "\134\064\127\001\002\000\026\006\uffd9\026\uffd9\035\uffd9" +
    "\047\130\050\131\051\133\052\132\053\126\063\134\064" +
    "\127\001\002\000\026\006\uffdd\026\uffdd\035\uffdd\047\130" +
    "\050\131\051\133\052\132\053\126\063\134\064\127\001" +
    "\002\000\026\006\uffdb\026\uffdb\035\uffdb\047\130\050\131" +
    "\051\133\052\132\053\126\063\134\064\127\001\002\000" +
    "\022\013\162\047\130\050\131\051\133\052\132\053\126" +
    "\063\134\064\127\001\002\000\052\006\uffcf\013\uffcf\020" +
    "\uffcf\026\uffcf\032\uffcf\033\uffcf\035\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\063\uffcf\064\uffcf\001\002\000\052" +
    "\006\uffd7\013\uffd7\020\uffd7\026\uffd7\032\uffd7\033\uffd7\035" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\063\uffd7\064" +
    "\uffd7\001\002\000\004\006\uffe5\001\002\000\004\035\166" +
    "\001\002\000\004\016\061\001\002\000\006\006\uffe7\036" +
    "\170\001\002\000\004\016\061\001\002\000\004\006\uffe6" +
    "\001\002\000\004\017\uffee\001\002\000\010\006\ufffb\010" +
    "\ufffb\036\ufffb\001\002\000\004\017\uffed\001\002\000\004" +
    "\065\176\001\002\000\024\012\112\050\111\054\123\062" +
    "\115\066\113\067\114\070\120\071\116\072\124\001\002" +
    "\000\024\032\200\033\201\047\130\050\131\051\133\052" +
    "\132\053\126\063\134\064\127\001\002\000\024\012\112" +
    "\050\111\054\123\062\115\066\113\067\114\070\120\071" +
    "\116\072\124\001\002\000\024\012\112\050\111\054\123" +
    "\062\115\066\113\067\114\070\120\071\116\072\124\001" +
    "\002\000\022\026\203\047\130\050\131\051\133\052\132" +
    "\053\126\063\134\064\127\001\002\000\004\016\061\001" +
    "\002\000\004\006\uffe8\001\002\000\022\026\206\047\130" +
    "\050\131\051\133\052\132\053\126\063\134\064\127\001" +
    "\002\000\004\016\061\001\002\000\004\006\uffe9\001\002" +
    "\000\004\026\211\001\002\000\004\016\061\001\002\000" +
    "\004\006\uffeb\001\002\000\004\012\257\001\002\000\004" +
    "\006\256\001\002\000\004\012\253\001\002\000\004\065" +
    "\246\001\002\000\004\012\243\001\002\000\006\006\236" +
    "\027\237\001\002\000\004\012\233\001\002\000\004\012" +
    "\225\001\002\000\004\006\224\001\002\000\006\006\uffc5" +
    "\027\uffc5\001\002\000\024\012\112\013\uffbd\054\123\062" +
    "\115\066\113\067\114\070\120\071\116\072\124\001\002" +
    "\000\004\013\232\001\002\000\004\020\230\001\002\000" +
    "\024\012\112\013\uffbd\054\123\062\115\066\113\067\114" +
    "\070\120\071\116\072\124\001\002\000\004\013\uffbc\001" +
    "\002\000\004\006\uffbf\001\002\000\004\067\234\001\002" +
    "\000\004\013\235\001\002\000\004\006\uffc1\001\002\000" +
    "\016\055\222\056\217\057\213\060\215\061\221\067\216" +
    "\001\002\000\024\012\112\050\111\054\123\062\115\066" +
    "\113\067\114\070\120\071\116\072\124\001\002\000\004" +
    "\006\uffea\001\002\000\004\006\242\001\002\000\022\006" +
    "\uffc3\027\uffc3\055\222\056\217\057\213\060\215\061\221" +
    "\067\216\001\002\000\024\012\112\013\uffbd\054\123\062" +
    "\115\066\113\067\114\070\120\071\116\072\124\001\002" +
    "\000\004\013\245\001\002\000\004\006\uffbe\001\002\000" +
    "\024\012\112\050\111\054\123\062\115\066\113\067\114" +
    "\070\120\071\116\072\124\001\002\000\036\006\252\041" +
    "\152\042\146\043\151\044\145\045\150\046\147\047\130" +
    "\050\131\051\133\052\132\053\126\063\134\064\127\001" +
    "\002\000\004\006\251\001\002\000\006\006\uffc7\027\uffc7" +
    "\001\002\000\006\006\uffc6\027\uffc6\001\002\000\004\067" +
    "\254\001\002\000\004\013\255\001\002\000\004\006\uffc0" +
    "\001\002\000\006\006\uffc4\027\uffc4\001\002\000\004\067" +
    "\260\001\002\000\004\013\261\001\002\000\004\006\uffc2" +
    "\001\002\000\004\010\263\001\002\000\004\002\000\001" +
    "\002\000\004\012\265\001\002\000\004\067\015\001\002" +
    "\000\004\013\267\001\002\000\004\006\270\001\002\000" +
    "\004\007\271\001\002\000\006\016\ufffa\067\015\001\002" +
    "\000\004\016\061\001\002\000\004\006\274\001\002\000" +
    "\006\014\ufffe\016\ufffe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\013\007\016\010\015\001\001\000\004\003\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\020\007\016\010\015\001\001\000\002\001\001" +
    "\000\006\011\024\012\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\040\012" +
    "\030\001\001\000\002\001\001\000\004\010\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\045\001" +
    "\001\000\004\005\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\051\010\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\054\012\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\057\007" +
    "\016\010\015\001\001\000\004\005\061\001\001\000\012" +
    "\013\070\014\071\015\067\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\217" +
    "\025\222\026\213\001\001\000\010\021\207\022\120\024" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\164\022\120\024" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\102\017\100\020" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\102\017\106\020\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\121\022\120\024\116\001\001\000\004\024\162\001" +
    "\001\000\006\022\160\024\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\124\024\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\142\001\001\000\004" +
    "\024\141\001\001\000\004\024\140\001\001\000\004\024" +
    "\137\001\001\000\004\024\136\001\001\000\004\024\135" +
    "\001\001\000\004\024\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\157\024\116\001\001\000\006\022\156" +
    "\024\116\001\001\000\006\022\155\024\116\001\001\000" +
    "\006\022\154\024\116\001\001\000\006\022\153\024\116" +
    "\001\001\000\006\022\152\024\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\166\001\001\000\002\001\001\000" +
    "\004\005\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\176\024\116\001\001\000\002\001\001\000\006" +
    "\022\204\024\116\001\001\000\006\022\201\024\116\001" +
    "\001\000\002\001\001\000\004\005\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\226\027\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\226\027" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\240\025\222\026\213\001\001\000\010\021\237\022\120" +
    "\024\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\240\025\222\026\213\001\001\000\006\024\226" +
    "\027\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\247\022\246\024\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\265\010\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\271\007\016" +
    "\010\015\001\001\000\004\005\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 //scanner.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


Scanner scanner;
Writer writer;

public void setScanner(Scanner scanner)
    {
        this.scanner = scanner;
    }
    
    public void setWriter(Writer  writer)
    {
        this.writer = writer;
    }
    
    public ParserCup(Scanner scanner,Writer writer){
        super(scanner);
        this.scanner = scanner;
        this.writer = writer;
    }




    public void report_error(String message, Object info){
		StringBuilder msg = new StringBuilder("Error");
		if(info instanceof java_cup.runtime.Symbol){
			Symbol s = (java_cup.runtime.Symbol) info;
			if(s.left >= 0){
				msg.append(" in line " + (s.left+1));
				if(s.right >= 0) msg.append(", column " + (s.right+1));
			}
		}

		msg.append(" : " + message);
		System.err.println(msg);
		writer.write(msg.toString()+"\n");
	}
	
	public Writer getWriter()
	{
		return this.writer;
	}
	
	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		//writer.write(message + " " + info + "\n");
		//System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // wrt_atom ::= atom COMMA wrt_atom 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("wrt_atom",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // wrt_atom ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("wrt_atom",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // wrt ::= WRITELN LEFTBRACKET wrt_atom RIGHTBRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="printf("+w+"); printf(\"\n\");"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("wrt",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // wrt ::= WRITE LEFTBRACKET wrt_atom RIGHTBRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="printf("+w+");"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("wrt",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rd ::= READLN LEFTBRACKET IDE RIGHTBRACKET 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="scanf(\"%s\","+i+");"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("rd",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rd ::= READKEY LEFTBRACKET IDE RIGHTBRACKET 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=i+"= getchar();"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("rd",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rd ::= READ LEFTBRACKET IDE RIGHTBRACKET 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="scanf(\"%s\","+i+");"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("rd",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stat ::= stat SEMICOLON stat SEMICOLON 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s1+";"+s2+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stat",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stat ::= wrt SEMICOLON 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=w; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stat",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stat ::= rd SEMICOLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=r; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stat",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stat ::= IDE ASSINGMENT expr_alg SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=i+"="+ea; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stat",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stat ::= IDE ASSINGMENT expr SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=i+"="+e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stat",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atom ::= NOT expr_alg 
            {
              String RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="!"+ea; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atom ::= CHAR 
            {
              String RESULT =null;
		 RESULT="char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atom ::= STRING 
            {
              String RESULT =null;
		 RESULT="char[]"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atom ::= REAL 
            {
              String RESULT =null;
		 RESULT="real"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atom ::= INT 
            {
              String RESULT =null;
		 RESULT="int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atom ::= NIL 
            {
              String RESULT =null;
		 RESULT="NULL"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atom ::= IDE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=i+""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atom ::= LEFTBRACKET expr_alg RIGHTBRACKET 
            {
              String RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="("+ea+")"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_alg ::= expr_alg MOD atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+" mod "+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_alg ::= expr_alg OR atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"|"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_alg ::= expr_alg AND atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"&"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_alg ::= expr_alg DIVIDE atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"/"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_alg ::= expr_alg MULTIPLY atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"*"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_alg ::= expr_alg MINUS atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"-"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_alg ::= expr_alg ADD atom 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e+"+"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_alg ::= MINUS atom 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="-"+a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_alg ::= atom 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a+""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_alg",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr_alg NOT_EQUALS expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+"!="+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr_alg GREATER_OR_EQUALS expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+">="+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr_alg LESS_OR_EQUALS expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+"<="+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr_alg LESS expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+"<"+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr_alg GREATER expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+">"+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr_alg EQUALS expr_alg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=e1+"="+e2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case_type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT="boolean"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_type",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // case_type ::= INT 
            {
              String RESULT =null;
		 RESULT="int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_type",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // case_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT="char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_type",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // case ::= case_type COLON expr SEMICOLON 
            {
              String RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String ct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="case \'"+ct+"\'{"+e1+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // caselist ::= case caselist 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=c1+""+c2 ; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("caselist",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // caselist ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("caselist",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cond_stat ::= CASE LEFTBRACKET IDE RIGHTBRACKET OF caselist END 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="switch("+i+"){"+cl+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cond_stat",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cond_stat ::= IF expr THEN block ELSE block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="if("+e+")"+b1+" else"+b2+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cond_stat",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cond_stat ::= IF expr THEN block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="if("+e+")"+b+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cond_stat",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // loop_stat ::= FOR IDE ASSINGMENT expr_alg DOWNTO expr_alg DO block 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="for("+i+"="+e1+";"+i+">"+e2+";"+i+"--)"+b+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("loop_stat",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loop_stat ::= FOR IDE ASSINGMENT expr_alg TO expr_alg DO block 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int ea1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String ea1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String ea2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="for("+i+"="+ea1+";"+i+"<"+ea2+";"+i+"++)"+b+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("loop_stat",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // loop_stat ::= REPEAT stat UNTIL expr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="do{"+s+"}"+"while("+e+");"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("loop_stat",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // loop_stat ::= WHILE expr DO block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT="while("+e+")"+b+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("loop_stat",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instructions ::= list_stat 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructions",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instructions ::= cond_stat SEMICOLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructions",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instructions ::= loop_stat SEMICOLON 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructions",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instructions ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructions",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // array ::= ARRAY LEFT_BRACKET2 INT DOT DOT INT RIGHT_BRACKET2 OF type 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=t+"["+i2+"]"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= array 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "char[]"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= REAL 
            {
              String RESULT =null;
		 RESULT = "real"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // names ::= IDE COMMA names 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=i+","+n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("names",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // names ::= IDE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("names",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables ::= names COLON type 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=t+" "+n+";"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var ::= variables SEMICOLON var 
            {
              String RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String vars = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=vars+";"+v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= BEGIN instructions END 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="{"+i+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= FUNCTION IDE LEFTBRACKET variables RIGHTBRACKET COLON type SEMICOLON VAR var block SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String vars = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=r+" "+i+"("+vars+"){"+v+b+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure ::= PROCEDURE IDE LEFTBRACKET variables RIGHTBRACKET SEMICOLON VAR var block SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String vars = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT="void "+i+"("+vars+"){"+v+b+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("procedure",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= 
            {
              String RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("procedure",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDE SEMICOLON USES IDE SEMICOLON VAR var procedure function block DOT 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 parser.getWriter().write(v+p+f+b+""); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

